# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: 
            - '../src/Application/Service/*/*Request.php'
            - '../src/DependencyInjection/*'
            - '../src/Domain/*'
            - '../src/Infrastructure/Web/*'

    # Database Abstraction Layer
    Doctrine\DBAL\Configuration:

    UserDB:
        class: 'Doctrine\DBAL\Connection'
        factory: 'Doctrine\DBAL\DriverManager::getConnection'
        arguments:
            -
                dbname: '%env(DB_DATABASE)%'
                user: '%env(DB_USER)%'
                password: '%env(DB_PASSWORD)%'
                host: '%env(DB_HOST)%'
                port: '%env(DB_PORT)%'
                driver: '%env(DB_DRIVER)%'
            - '@Doctrine\DBAL\Configuration'

    Doctrine\DBAL\Connection $conn: '@UserDB'

    # Amqp
    PhpAmqpLib\Connection\AMQPStreamConnection:
        arguments:
            - '%env(AMQP_HOST)%'
            - '%env(AMQP_PORT)%'
            - '%env(AMQP_USER)%'
            - '%env(AMQP_PASS)%'
            - '%env(AMQP_VHOST)%'

    # Amqp Subscriber
    App\Infrastructure\EventBus\RabbitmqPublisher:
        arguments:
            - '@PhpAmqpLib\Connection\AMQPStreamConnection'
            - '%env(AMQP_EXCHANGE_NAME)%'
            - '%env(AMQP_EXCHANGE_TYPE)%'
            - '%env(AMQP_EXCHANGE_PASSIVE)%'
            - '%env(AMQP_EXCHANGE_DURABLE)%'
            - '%env(AMQP_EXCHANGE_AUTO_DELETE)%'
            - '%env(AMQP_EXCHANGE_EXCLUSIVE)%'

    App\Infrastructure\EventBus\RabbitmqListener:
        arguments:
            - '@PhpAmqpLib\Connection\AMQPStreamConnection'
            - '%env(AMQP_EXCHANGE_NAME)%'
            - '%env(AMQP_EXCHANGE_TYPE)%'
            - '%env(AMQP_EXCHANGE_PASSIVE)%'
            - '%env(AMQP_EXCHANGE_DURABLE)%'
            - '%env(AMQP_EXCHANGE_AUTO_DELETE)%'
            - '%env(AMQP_EXCHANGE_EXCLUSIVE)%'

    App\Infrastructure\EventBus\Subscriber\:
        resource: '../src/Infrastructure/EventBus/Subscriber'
        arguments: 
            - '@App\Infrastructure\EventBus\RabbitmqPublisher'
        tags: ['dh.event_subscribers']

    App\Domain\DomainEventPublisher:
        factory: 'App\Domain\DomainEventPublisher::instance'

    App\Infrastructure\EventBus\DomainEventListener:
        factory: 'App\Infrastructure\EventBus\DomainEventListener::instance'

    App\Command\EventListenerCommand:
        tags:
            - { name: 'console.command', command: 'dh:api:event-listener' }

    App\Infrastructure\EventBus\Listener\:
        resource: '../src/Infrastructure/EventBus/Listener'
        tags: ['dh.event_listeners']

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Application\Handler\:
        resource: '../src/Application/Handler'
        tags: ['controller.service_arguments']

    App\Infrastructure\Web\Symfony\Event\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
